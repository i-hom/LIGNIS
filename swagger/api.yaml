openapi: 3.0.3
info:
  version: 1.0.0
  title: LIGNIS API
servers:
  - url: http://localhost:7707/
paths:
  /api/v1/login:
    post:
      summary: Login
      description: Login
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user:
    post:
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/customer:
    post:
      summary: Create customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/agent:
    post:
      summary: Create Agent
      operationId: createAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/product:
    post:
      summary: Create product
      description: Create product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      description: Represents error object
      type: object
      required:
        - message
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ResponseWithID:
      type: object
      required: 
        - id
      properties:
        id:
          type: string
    AddProductRequest:
      type: object
      required:
        - name
        - code
        - photo
      properties:
        name:
          type: string
        code:
          type: string
        photo:
          type: number
          format: binary
    User:
      type: object
      required:
        - fio
        - login
        - password
        - role
      properties:
        fio:
          type: string
        login:
          type: string
        password:
          type: string
        role:
          type: string
    UserWithID:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/User'
    Customer:
      type: object
      required:
        - fio
        - phone
        - address
      properties:
        fio:
          type: string
        phone:
          type: string
        address:
          type: string
    CustomerWithID:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Customer'
    Agent:
      type: object
      required:
        - fio
        - phone
        - instagram_username
        - bonus_percent
      properties:
        fio:
          type: string
        phone:
          type: string
        instagram_username:
          type: string
        bonus_percent:
          type: number
    AgentWithID:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Agent'

security:
  - BearerAuth: [ ]
