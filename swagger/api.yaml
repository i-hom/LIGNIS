openapi: 3.0.3
info:
  version: 1.0.0
  title: LIGNIS API
servers:
  - url: https://lignis.webhook.uz/
paths:
  /api/v1/login:
    post:
      summary: Login
      description: Login
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/user: 
    post: #admin
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get users by pattern
      operationId: getUsers
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - users
                properties:
                  total:
                    type: integer
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/customer:
    post: #salesman
      summary: Create customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get customers
      operationId: getCustomers
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - customers
                properties:
                  total:
                    type: integer
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomerWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/agent:
    post: #admin
      summary: Create Agent
      operationId: createAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get agents by pattern
      operationId: getAgents
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - agents
                properties:
                  total:
                    type: integer                  
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete agent
      operationId: deleteAgent
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/product:
    post: #manager
      summary: Create product
      description: Create product
      operationId: createProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get products
      description: Get products
      operationId: getProducts
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - products
                properties:
                  total:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetProducts'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update product
      description: Update product
      operationId: updateProduct
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for search
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditProductRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/product/archive:
    get:
      summary: Get archived products
      operationId: getArchivedProducts
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - products
                properties:
                  total:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetProducts'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Restore archived products
      operationId: deleteArchivedProducts
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/sale/refund:
    get:
      summary: Get refunds
      operationId: getRefunds
      parameters:
        - in: query
          name: from
          schema:
            type: string
            default: ''
        - in: query
          name: to
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - refunds
                properties:
                  total:
                    type: integer
                  refunds:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalesWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/defect:
    post:
      summary: Create defect product
      operationId: createDefect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
              properties:
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/DefectProduct' 
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get defects
      operationId: getDefects
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
            default: ''
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - defects
                properties:
                  total:
                    type: integer
                  defects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Defect'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete defect
      operationId: deleteDefect
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/dashboard:
    get:
      summary: Get dashboard
      description: Get dashboard
      operationId: getDashboard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/product/stats:
    get:
      summary: Get product stats
      description: Get product stats
      operationId: getProductStats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_products
                  - total_quantity
                  - total_stock_value
                properties:
                  total_products:
                    type: integer
                  total_quantity:
                    type: integer
                  total_stock_value:
                    type: number
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/report/monthly:
    get:
      summary: Get monthly report
      description: Get monthly report
      operationId: getMonthlyReport
      parameters:
        - in: query
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - report
                properties:
                  report:
                    type: array
                    items:
                      $ref: '#/components/schemas/DailyReport'
                  total_uzs:
                    type: number
                    format: int64
                  total_usd:
                    type: number
                
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/report/agent:
    get:
      summary: Get agent report
      description: Get agent report
      operationId: getAgentReport
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - recipts
                  - total
                  - bonus
                properties:
                  report:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - date
                        - total_usd
                      properties:
                        id:
                          type: string
                        date:
                          type: string
                        total_usd:
                          type: number
                  total:
                    type: number
                  bonus:
                    type: number

        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/sale:
    post: #salesman
      summary: Create sale
      description: Create sale
      operationId: createSale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sales'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get sales
      description: Get sales
      operationId: getSales
      parameters:
        - in: query
          name: from
          schema:
            type: string
            default: ''
        - in: query
          name: to
          schema:
            type: string
            default: ''
        - in: query
          name: page 
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - sales
                properties:
                  total:
                    type: integer
                  sales:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalesWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete: #salesman
      summary: Delete sale
      operationId: deleteSale
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: ID for delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/acceptance:
    post: #manager
      summary: Create acceptance
      description: Create acceptance
      operationId: createAcceptance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
              properties:
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/AcceptanceRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get acceptances
      description: Get acceptances
      operationId: getAcceptances
      parameters:
        - in: query
          name: from
          schema:
            type: string
            default: ''
        - in: query
          name: to
          schema:
            type: string
            default: ''
        - in: query
          name: page 
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                  - acceptances
                properties:
                  total:
                    type: integer
                  acceptances:
                    type: array
                    items:
                      $ref: '#/components/schemas/AcceptanceWithID'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete acceptance
      operationId: deleteAcceptance
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/v1/image/{id}:
    get:
      summary: Get image
      operationId: getImage
      security: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID for search
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      description: Represents error object
      type: object
      required:
        - message
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          minLength: 5
        password:
          type: string
          minLength: 8
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ResponseWithID:
      type: object
      required: 
        - id
      properties:
        id:
          type: string
    
    CreateProductRequest:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          minLength: 5
        code:
          type: string
          minLength: 5
        photo:
          type: string
          format: binary
    EditProductRequest:
      type: object
      required:
        - name
        - code
        - price
      properties:
        name:
          type: string
          minLength: 5
        code:
          type: string
          minLength: 5
        price:
          type: number
          minimum: 0
        photo:
          type: string
          format: binary
    GetProducts:
      type: object
      required:
        - id
        - name
        - code 
        - price
        - quantity
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        price:
          type: number
        quantity:
          type: integer
    SaleProduct:
      type: object
      required:
        - id
        - quantity
        - price
      properties:
        id:
          type: string
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
    CreateUserRequest:
      type: object
      required:
        - fio
        - login
        - password
        - role
      properties:
        fio:
          type: string
          minLength: 5
        login:
          type: string
          minLength: 5
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum: [admin, manager, salesman]
        
    AcceptanceRequest:
      type: object
      required:
        - id
        - quantity
        - cost_price
        - sell_price
      properties:
        id:
          type: string
        quantity:
          type: integer
          minimum: 1
        cost_price:
          type: number
          minimum: 0
        sell_price:
          type: number
          minimum: 0
    AcceptanceProduct:
      type: object
      required:
        - id
        - name
        - quantity
        - cost_price
      properties:
        id:
          type: string
        name: 
          type: string
        quantity:
          type: integer
          minimum: 1
        cost_price:
          type: number
          minimum: 0      

    DefectProduct:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: string
        name:
          type: string
        quantity:
          type: integer
          minimum: 1
        remark:
          type: string
    Defect:
      type: object
      required:
        - id
        - defects
        - created_by
      properties:
        id:
          type: string
        created_by:
          type: string
        defects:
          type: array
          items:
            $ref: '#/components/schemas/DefectProduct'

    UserWithID:
      type: object
      required:
        - id
        - fio
        - role
      properties:
        id:
          type: string
        fio:
          type: string
          minLength: 5
        role:
          type: string
          enum: [admin, manager, salesman]
   
    Customer:
      type: object
      required:
        - fio
        - phone
        - address
      properties:
        fio:
          type: string
          minLength: 5
        phone:
          type: string
          minLength: 13
        address:
          type: string
          minLength: 5
    CustomerWithID:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Customer'
    
    Agent:
      type: object
      required:
        - fio
        - phone
        - bonus_percent
      properties:
        fio:
          type: string
          minLength: 5
        phone:
          type: string
          minLength: 13
        instagram_username:
          type: string
          minLength: 5
        bonus_percent:
          type: integer
    AgentWithID:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Agent'
    
    Sales:
      type: object
      required:
        - products
        - total_uzs
        - total_usd
        - currency_code
      properties:
        deleted_by:
          type: string
        customer_id:
          type: string
        agent_id:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/SaleProduct'
        total_uzs:
          type: integer
          format: int64
        total_usd:
          type: number
        currency_code:
          type: string
          enum: [USD, UZS]
    SalesWithID:
      allOf:
        - type: object
          required:
            - id
            - date
          properties:
            id:
              type: string
            date:
              type: string
              format: date
        - $ref: '#/components/schemas/Sales'
    
    AcceptanceWithID:
      type: object
      required:
        - id
        - date
        - products
      properties:
        id:
          type: string
        date:
          type: string
          format: date
        products:
          type: array
          items:
            $ref: '#/components/schemas/AcceptanceProduct'

    Analytics:
      type: object
      required:
        - label
        - value
      properties:
        label:
          type: string
        value:
          type: number

    DailyReport:
      type: object
      required:
        - date
        - total_uzs
        - total_usd
      properties:
        date:
          type: string
        total_uzs:
          type: integer
          format: int64
        total_usd:
          type: number

    Dashboard:
      type: object
      required:
        - weekly
        - yearly
        - topProducts
      properties:
        last7daySales:
          type: array
          items:
            $ref: '#/components/schemas/Analytics'
        lastYearSales:
          type: array
          items:
            $ref: '#/components/schemas/Analytics'
        topProducts:
          type: array
          items:
            $ref: '#/components/schemas/Analytics'

security:
  - BearerAuth: [ ]
